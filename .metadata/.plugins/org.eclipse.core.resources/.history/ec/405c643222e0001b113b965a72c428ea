package com.prueba.microservicios.app.foto;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.doNothing;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.web.server.ResponseStatusException;

import com.prueba.microservicios.app.foto.models.entity.Foto;
import com.prueba.microservicios.app.foto.models.repository.FotoRepository;
import com.prueba.microservicios.app.foto.services.FotoServiceImpl;

@SpringBootTest
public class FotoServiceTest {
	
	@Mock
	private FotoRepository repository;
	
	@InjectMocks
	private FotoServiceImpl service;
	
	private static final String ID = "1";
	
	@BeforeEach
	public void setUp() {
		service = new FotoServiceImpl(repository);
	}
	
	@Test
	public void consultarFotoPorIdTest() {
		//Preparación
		Foto foto = Foto.builder().id(ID).datosBase64("TWFuIGlzIGRpc3Rpbmd1aX").build();
		Mockito.when(repository.findById(ID)).thenReturn(Optional.of(foto));
		
		//Prueba
		Foto fotoPrueba = service.findFotoById(ID).get();
		
		//Verificacion
		Assertions.assertThat(fotoPrueba.getDatosBase64()).isEqualTo("TWFuIGlzIGRpc3Rpbmd1aX");
	}
	
	@Test
	public void consultarFotoPorIdErrorTest() {
		//Preparación
		Foto foto = Foto.builder().id(ID).datosBase64("TWFuIGlzIGRpc3Rpbmd1aX").build();
		Mockito.when(repository.findById(ID)).thenReturn(Optional.of(foto));
		
		//Preuba - verificación
		assertThrows(ResponseStatusException.class, ()->{
			service.findFotoById("2");
            });
	}
	
	@Test
	public void guardarFotoTest() {
		//Preparación
		Foto foto = Foto.builder().id(ID).datosBase64("TWFuIGlzIGRpc3Rpbmd1aX").build();
		Mockito.when(repository.save(foto)).thenReturn(foto);
		
		//Prueba
		Foto fotoPrueba = repository.save(foto);
		
		//Verificación
		Assertions.assertThat(fotoPrueba.getId()).isEqualTo(ID);
	}
	
	@Test
	public void obtenerFotosTest() {
		//Preparación
		Foto foto = Foto.builder().id(ID).datosBase64("TWFuIGlzIGRpc3Rpbmd1aX").build();
		List<Foto> fotos = new ArrayList<>();
		fotos.add(foto);
		Mockito.when(repository.findAll()).thenReturn(fotos);
		
		//Prueba
		Iterable<Foto> fotosPrueba = service.findAll();
		
		//Verificación
		Assertions.assertThat(fotosPrueba).isNotEmpty();
	}
	
	@Test
	public void eliminarFotoPorIdTest() {
		//Preparación
		Foto foto = Foto.builder().id(ID).datosBase64("TWFuIGlzIGRpc3Rpbmd1aX").build();
		service.save(foto);
		
		Mockito.doNothing().when(service).deleteById(ID);
		
		//Prueba - Verificacion
		assertSame(service.deleteById(ID), service.deleteById(ID));
	}
	
	

}
